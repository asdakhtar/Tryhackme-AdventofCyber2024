
---

## üïµÔ∏è‚Äç‚ôÇÔ∏è **Day 21 Walkthrough ‚Äì WarevilleApp.exe Reverse Engineering**

### üß© **Objective:**  
Analyze the behavior of `WarevilleApp.exe`, identify its download and execution flow, and trace its interaction with C2 infrastructure.

---

### üîç **Step-by-Step Analysis**

#### ‚úÖ **1. What is the function name that downloads and executes files in WarevilleApp.exe?  
**Answer:** `DownloadAndExecuteFile`

- **How to find it:**  
  - Open `WarevilleApp.exe` in **Ghidra** or **iLSpy**.
  - Look for function calls related to `WebClient`, `DownloadFile`, or `Process.Start`.
  - The function `DownloadAndExecuteFile` contains logic to fetch and run the second-stage binary.

---

#### ‚úÖ **2. What is the name of the binary downloaded after running WarevilleApp.exe?  
**Answer:** `explorer.exe`

- **Behavior:**  
  - Upon execution, `WarevilleApp.exe` downloads `explorer.exe` to the **Downloads** folder.
  - This binary is the **second stage payload**.

---

#### ‚úÖ **3. What domain name is used to download the file?  
**Answer:** `mayorc2.thm`

- **How to confirm:**  
  - Inspect network traffic using **Wireshark** or **Procmon**.
  - Look for HTTP GET requests or DNS queries.
  - The domain `mayorc2.thm` is contacted to fetch `explorer.exe`.

---

#### ‚úÖ **4. What is the name of the zip file created by the stage 2 binary?  
**Answer:** `CollectedFiles.zip`

- **Behavior:**  
  - `explorer.exe` collects system data (e.g., documents, screenshots, logs).
  - It compresses the data into `CollectedFiles.zip` before attempting exfiltration.

---

#### ‚ùì **5. What is the name of the C2 server where the stage 2 binary tries to upload files?  
**Answer:** *(Pending ‚Äì not yet answered)*

- **Hint:**  
  - Monitor outbound traffic after `CollectedFiles.zip` is created.
  - Look for POST requests or FTP/SFTP uploads.
  - Use tools like **Wireshark**, **Fiddler**, or **Procmon** to trace the destination.

---

### üß† **Tools Used**
- iLSpy ‚Äì for static analysis
- pestudio 
- TryHackMe VM ‚Äì for safe execution and observation

---

